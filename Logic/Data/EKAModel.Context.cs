//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Logic.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EKAEntities : DbContext
    {
        public EKAEntities()
            : base("name=EKAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<MaterialExistance> MaterialExistances { get; set; }
        public virtual DbSet<MaterialGroup> MaterialGroups { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<UnitGroup> UnitGroups { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<WareHouse> WareHouses { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
    
        public virtual ObjectResult<Nullable<int>> ActivateUser(Nullable<int> actorID, Nullable<int> userID)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ActivateUser", actorIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateMaterial(Nullable<int> actorID, Nullable<int> materialGroupID, Nullable<decimal> qty)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var materialGroupIDParameter = materialGroupID.HasValue ?
                new ObjectParameter("MaterialGroupID", materialGroupID) :
                new ObjectParameter("MaterialGroupID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateMaterial", actorIDParameter, materialGroupIDParameter, qtyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateMaterialGroup(Nullable<int> actorID, string name, Nullable<int> unitID)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateMaterialGroup", actorIDParameter, nameParameter, unitIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateNewOrder(Nullable<int> actorID, Nullable<int> materialID, Nullable<int> toWareHouseID)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var materialIDParameter = materialID.HasValue ?
                new ObjectParameter("MaterialID", materialID) :
                new ObjectParameter("MaterialID", typeof(int));
    
            var toWareHouseIDParameter = toWareHouseID.HasValue ?
                new ObjectParameter("ToWareHouseID", toWareHouseID) :
                new ObjectParameter("ToWareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateNewOrder", actorIDParameter, materialIDParameter, toWareHouseIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateUnit(Nullable<int> actorID, string name, Nullable<int> unitGroupID, Nullable<float> factor)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var unitGroupIDParameter = unitGroupID.HasValue ?
                new ObjectParameter("UnitGroupID", unitGroupID) :
                new ObjectParameter("UnitGroupID", typeof(int));
    
            var factorParameter = factor.HasValue ?
                new ObjectParameter("Factor", factor) :
                new ObjectParameter("Factor", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateUnit", actorIDParameter, nameParameter, unitGroupIDParameter, factorParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateUnitGroup(Nullable<int> actorID, string name)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateUnitGroup", actorIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DisableAllowReceiveWareHouse(Nullable<int> actorID, Nullable<int> wareHouseID)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DisableAllowReceiveWareHouse", actorIDParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DisableAllowSendWareHouse(Nullable<int> actorID, Nullable<int> wareHouseID)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DisableAllowSendWareHouse", actorIDParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> EnableAllowReceiveWareHouse(Nullable<int> actorID, Nullable<int> wareHouseID)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("EnableAllowReceiveWareHouse", actorIDParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> RemoveManagerOfWareHouse(Nullable<int> actorID, Nullable<int> wareHouseID)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("RemoveManagerOfWareHouse", actorIDParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetManagerToWareHouse(Nullable<int> actorID, Nullable<int> wareHouseID, Nullable<int> userID)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetManagerToWareHouse", actorIDParameter, wareHouseIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ChangeDetailsOfUser(Nullable<int> actorID, Nullable<int> userID, string firstName, string lastName)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ChangeDetailsOfUser", actorIDParameter, userIDParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ChangePasswordOfUser(Nullable<int> actorID, Nullable<int> userID, string oldPAssword, string newPassword)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var oldPAsswordParameter = oldPAssword != null ?
                new ObjectParameter("OldPAssword", oldPAssword) :
                new ObjectParameter("OldPAssword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ChangePasswordOfUser", actorIDParameter, userIDParameter, oldPAsswordParameter, newPasswordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeactivateUser(Nullable<int> actorID, Nullable<int> userID)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeactivateUser", actorIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateUser(Nullable<int> actorID, string userName, string password, string firstName, string lastName, Nullable<bool> isActive)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateUser", actorIDParameter, userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateWareHouse(Nullable<int> actorID, string name, Nullable<bool> allowReceive, Nullable<bool> allowsend)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var allowReceiveParameter = allowReceive.HasValue ?
                new ObjectParameter("AllowReceive", allowReceive) :
                new ObjectParameter("AllowReceive", typeof(bool));
    
            var allowsendParameter = allowsend.HasValue ?
                new ObjectParameter("Allowsend", allowsend) :
                new ObjectParameter("Allowsend", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateWareHouse", actorIDParameter, nameParameter, allowReceiveParameter, allowsendParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> EnableAllowSendWareHouse(Nullable<int> actorID, Nullable<int> wareHouseID)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("EnableAllowSendWareHouse", actorIDParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> RemoveFromAdminUsers(Nullable<int> actorID, Nullable<int> userID)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("RemoveFromAdminUsers", actorIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddToAdminUsers(Nullable<int> actorID, Nullable<int> userID)
        {
            var actorIDParameter = actorID.HasValue ?
                new ObjectParameter("ActorID", actorID) :
                new ObjectParameter("ActorID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddToAdminUsers", actorIDParameter, userIDParameter);
        }
    }
}
